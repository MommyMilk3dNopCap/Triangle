import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
from tqdm import tqdm  # <- for progress bar
import random
from functools import lru_cache
import joblib
import os
from scipy.optimize import differential_evolution
import tkinter as tk
from tkinter import ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


# --- Inverse Solver ---
def inverse_loss(angles, target_r, fast_level=6):
    angle1, angle2 = angles
    if angle1 <= 0 or angle2 <= 0 or angle1 + angle2 >= 179.9:
        return 1e6  # Invalid triangle

    try:
        A, B, C, _ = triangle_from_angles(angle1, angle2)
        df, ratios, first_diff, second_diff = process_triangle_from_coords(A, B, C, fast_level)
        r_est = extrapolate_growth_ratio(ratios, first_diff, second_diff)
        return abs(r_est - target_r)
    except Exception:
        return 1e6

def solve_for_target_ratio(target_r, fast_level=6, final_level=12):
    bounds = [(1.0, 89.0), (1.0, 89.0)]
    result = differential_evolution(inverse_loss, bounds, args=(target_r, fast_level), tol=1e-6, maxiter=1000)

    if result.success:
        angle1, angle2 = result.x
        angle3 = 180 - angle1 - angle2
        A, B, C, _ = triangle_from_angles(angle1, angle2)
        df, ratios, _, _ = process_triangle_from_coords(A, B, C, final_level)
        r_final = ratios[-1] if ratios[-1] is not None else 0
        return {
            "Angle 1": round(angle1, 4),
            "Angle 2": round(angle2, 4),
            "Angle 3": round(angle3, 4),
            "Final r (level {}):".format(final_level): round(r_final, 6),
            "Target r": round(target_r, 6),
            "Loss at fast level": round(result.fun, 8)
        }
    else:
        return {"Error": "No solution found", "Details": result.message}
# Persistent cache setup
CACHE_FILE = "triangle_cache.joblib"

if os.path.exists(CACHE_FILE):
    cache = joblib.load(CACHE_FILE)
else:
    cache = {}


@lru_cache(maxsize=None)
def cached_triangle_area(A, B, C):
    return 0.5 * abs((A[0]*(B[1]-C[1]) + B[0]*(C[1]-A[1]) + C[0]*(A[1]-B[1])))

@lru_cache(maxsize=None)
def cached_centroid(A, B, C):
    return ((A[0]+B[0]+C[0])/3, (A[1]+B[1]+C[1])/3)

@lru_cache(maxsize=None)
def cached_angle_ratios(A, B, C):
    a = np.linalg.norm(np.subtract(B, C))
    b = np.linalg.norm(np.subtract(C, A))
    c = np.linalg.norm(np.subtract(A, B))
    angle_A = math.acos((b**2 + c**2 - a**2) / (2 * b * c))
    angle_B = math.acos((a**2 + c**2 - b**2) / (2 * a * c))
    angle_C = math.pi - angle_A - angle_B
    angles = np.array([angle_A, angle_B, angle_C])
    return tuple(angles / sum(angles))


# --- Utility Functions ---
def triangle_cache_key(A, B, C, level):
    angles = cached_angle_ratios(A, B, C)
    return (angles, level)


def triangle_area(A, B, C):
    return 0.5 * abs((A[0]*(B[1]-C[1]) + B[0]*(C[1]-A[1]) + C[0]*(A[1]-B[1])))

def centroid(A, B, C):
    return (A + B + C) / 3

def angle_ratios(A, B, C):
    a = np.linalg.norm(B - C)
    b = np.linalg.norm(C - A)
    c = np.linalg.norm(A - B)
    angle_A = math.acos((b**2 + c**2 - a**2) / (2 * b * c))
    angle_B = math.acos((a**2 + c**2 - b**2) / (2 * a * c))
    angle_C = math.pi - angle_A - angle_B
    angles = np.array([angle_A, angle_B, angle_C])
    return angles / sum(angles)

def phi(area_norm, angle_ratios):
    return area_norm * sum(angle_ratios * np.log1p(angle_ratios))

def iterative_fingerprint(A, B, C, max_level, A0):
    key = triangle_cache_key(A, B, C, max_level)
    if key in cache:
        return cache[key]

    triangles = [(A, B, C)]
    total_phi = 0
    for level in range(max_level):
        new_triangles = []
        for tri in triangles:
            G = cached_centroid(*tri)
            sub_triangles = [
                (tri[0], tri[1], G),
                (tri[1], tri[2], G),
                (tri[2], tri[0], G)
            ]
            for sub in sub_triangles:
                area = cached_triangle_area(*sub)
                area_norm = area / A0
                angles = cached_angle_ratios(*sub)
                value = phi(area_norm, angles)
                total_phi += value
                new_triangles.append(sub)
        triangles = new_triangles

    cache[key] = total_phi  # Save to cache
    return total_phi



def process_triangle_from_coords(A, B, C, max_level):
    A, B, C = tuple(A), tuple(B), tuple(C)
    
    A0 = cached_triangle_area(A, B, C)
    sums, ratios, first_diff, second_diff = [], [], [], []

    prev_sum = None
    prev_ratio = None
    prev_first_diff = None

    for level in tqdm(range(1, max_level + 1), desc="Processing Levels"):
        val = iterative_fingerprint(A, B, C, level, A0)
        sums.append(val)

        # Calculate Ratio
        if prev_sum is not None:
            ratio = val / prev_sum
            ratios.append(ratio)
        else:
            ratios.append(None)

        # Calculate First Difference
        if prev_ratio is not None and ratios[-1] is not None:
            fd = ratios[-1] - prev_ratio
            first_diff.append(fd)
        else:
            first_diff.append(None)

        # Calculate Second Difference
        if prev_first_diff is not None and first_diff[-1] is not None:
            sd = first_diff[-1] - prev_first_diff
            second_diff.append(sd)
        else:
            second_diff.append(None)

        prev_sum = val
        prev_ratio = ratios[-1]
        prev_first_diff = first_diff[-1]

    df = pd.DataFrame({
        'Level': list(range(1, max_level + 1)),
        'Sum of ϕ values (S_n)': sums,
        'Ratio S_n / S_n-1': ratios,
        'First Difference': first_diff,
        'Second Difference': second_diff
    })

    return df, ratios, first_diff, second_diff



def triangle_from_angles(angle1_deg, angle2_deg):
    angle3_deg = 180 - angle1_deg - angle2_deg
    if angle3_deg <= 0:
        raise ValueError("The sum of the two angles must be less than 180 degrees.")
    A = np.array([0.0, 0.0])
    B = np.array([1.0, 0.0])
    angle1_rad = math.radians(angle1_deg)
    angle3_rad = math.radians(angle3_deg)
    a = 1.0
    b = a * math.sin(angle1_rad) / math.sin(angle3_rad)
    cx = math.cos(angle1_rad) * b
    cy = math.sin(angle1_rad) * b
    C = np.array([cx, cy])
    return A, B, C, angle3_deg

# --- Estimation System ---
def extrapolate_growth_ratio(ratios, first_diff, second_diff, max_extra_steps=100, threshold=1e-10):
    r = [v for v in ratios if v is not None][-1]
    d1 = [v for v in first_diff if v is not None][-1]

    # Calculate decay rate based on recent first differences
    recent_d1_ratios = [
        first_diff[i] / first_diff[i - 1]
        for i in range(len(first_diff) - 3, len(first_diff))
        if first_diff[i] is not None and first_diff[i - 1] and first_diff[i - 1] != 0
    ]
    
    if not recent_d1_ratios:
        return r
    
    decay_rate = sum(recent_d1_ratios) / len(recent_d1_ratios)
    decay_rate = min(max(decay_rate, 0), 1)

    print(f"\n--- Extrapolation Debug (Corrected) ---")
    

    for step in range(max_extra_steps):
        d1 *= decay_rate  # Now correctly decaying d1 directly
        r += d1

        

        if abs(d1) < threshold:
            print("→ Converged (threshold reached)\n")
            break

    return r

class TriangleResultWindow:
    def __init__(self, title="Triangle Growth Visualizer"):
        self.window = tk.Toplevel()
        self.window.title(title)

        # --- Text Results ---
        self.result_box = tk.Text(self.window, width=60, height=12)
        self.result_box.grid(row=0, column=0, padx=10, pady=5)

        # --- Plot ---
        self.fig, self.ax = plt.subplots(figsize=(6, 4))
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.window)
        self.canvas.get_tk_widget().grid(row=0, column=1, rowspan=3, padx=10, pady=10)

        # --- X-Axis Zoom Controls ---
        zoom_frame = ttk.LabelFrame(self.window, text="X-Axis Zoom (Level Range)")
        zoom_frame.grid(row=1, column=0, padx=10, pady=5, sticky="ew")

        self.xmin_var = tk.IntVar(value=1)
        self.xmax_var = tk.IntVar(value=10)

        ttk.Label(zoom_frame, text="Min Level").grid(row=0, column=0)
        ttk.Entry(zoom_frame, textvariable=self.xmin_var, width=5).grid(row=0, column=1)

        ttk.Label(zoom_frame, text="Max Level").grid(row=0, column=2)
        ttk.Entry(zoom_frame, textvariable=self.xmax_var, width=5).grid(row=0, column=3)

        ttk.Button(zoom_frame, text="Apply Zoom", command=self.update_zoom).grid(row=0, column=4, padx=5)

        # --- Y-Axis Zoom Slider ---
        yzoom_frame = ttk.LabelFrame(self.window, text="Y-Axis Zoom")
        yzoom_frame.grid(row=2, column=0, padx=10, pady=5, sticky="ew")

        self.yzoom_slider = tk.DoubleVar(value=0.2)
        ttk.Label(yzoom_frame, text="Zoom Buffer %").grid(row=0, column=0)
        ttk.Scale(yzoom_frame, from_=0.01, to=0.5, variable=self.yzoom_slider, orient='horizontal', length=200).grid(row=0, column=1)
        ttk.Button(yzoom_frame, text="Apply Zoom", command=self.update_zoom).grid(row=0, column=2, padx=5)

    def show_results(self, df, angle1, angle2, angle3, final_ratio, asymptotic):
        self.result_box.delete(1.0, tk.END)
        self.result_box.insert(tk.END, f"Angles: {angle1:.2f}°, {angle2:.2f}°, {angle3:.2f}°\n")
        self.result_box.insert(tk.END, f"Final Growth Ratio: {final_ratio:.6f}\n")
        self.result_box.insert(tk.END, f"Asymptotic Estimate: {asymptotic:.6f}\n")
        self.result_box.insert(tk.END, f"Difference: {asymptotic - final_ratio:.6f}\n")

        self.last_df = df  # Save for zooming
        self.plot_graph(df)

    def show_inverse_result(self, result_dict):
        self.result_box.delete(1.0, tk.END)
        for key, value in result_dict.items():
            self.result_box.insert(tk.END, f"{key}: {value}\n")

    def plot_graph(self, df):
        self.ax.clear()

        levels = df['Level']
        phi_sums = df['Sum of ϕ values (S_n)']
        ratios = df['Ratio S_n / S_n-1'].tolist()
        first_diff = df['First Difference'].tolist()
        second_diff = df['Second Difference'].tolist()

        # Begin extrapolation
        extra_steps = 10
        extended_levels = list(levels)
        extended_ratios = [r for r in ratios if r is not None]

        # Safety check
        if not extended_ratios or not first_diff or all(v is None for v in first_diff):
            self.ax.set_title("Insufficient data to plot growth ratios.")
            self.canvas.draw()
            return

        try:
            r = extended_ratios[-1]
            d1 = [v for v in first_diff if v is not None][-1]

            recent_d1_ratios = [
                first_diff[i] / first_diff[i - 1]
                for i in range(len(first_diff) - 3, len(first_diff))
                if first_diff[i] is not None and first_diff[i - 1] and first_diff[i - 1] != 0
            ]
            decay_rate = sum(recent_d1_ratios) / len(recent_d1_ratios) if recent_d1_ratios else 0.95
            decay_rate = min(max(decay_rate, 0), 1)

            for step in range(1, extra_steps + 1):
                d1 *= decay_rate
                r += d1
                extended_levels.append(len(extended_levels) + 1)
                extended_ratios.append(r)

        except Exception as e:
            print("Extrapolation error:", e)
            self.ax.set_title("Error during extrapolation.")
            self.canvas.draw()
            return

        # Plot raw data
        self.ax.plot(levels, phi_sums, label='ϕ Sum')
        self.ax.plot(levels, df['Ratio S_n / S_n-1'], label='Growth Ratio (computed)')
        self.ax.plot(levels, df['First Difference'], label='1st Diff')
        self.ax.plot(levels, df['Second Difference'], label='2nd Diff')

        # Extrapolated ratio (orange dashed)
        self.ax.plot(extended_levels[len(ratios):], extended_ratios[len(ratios):],
                     label='Growth Ratio (extrapolated)', linestyle='--', color='orange')

        # Plot asymptote
        asymptote_value = extended_ratios[-1]
        if np.isfinite(asymptote_value):
            self.ax.axhline(y=asymptote_value, color='gray', linestyle='dashed', linewidth=1.2,
                            label=f"Asymptote ≈ {asymptote_value:.4f}")
            self.ax.text(extended_levels[-1] + 0.5, asymptote_value, f"{asymptote_value:.4f}",
                         color='gray', va='center', ha='left', fontsize=9, style='italic')

        # Y-axis zoom with protection
        try:
            all_ratios = np.array(extended_ratios)
            if len(all_ratios) > 0 and np.all(np.isfinite(all_ratios)):
                ymin, ymax = np.min(all_ratios), np.max(all_ratios)
                buffer = (ymax - ymin) * self.yzoom_slider.get() if ymax > ymin else 0.05
                self.ax.set_ylim(ymin - buffer, ymax + buffer)
            else:
                self.ax.set_ylim(0.9, 1.1)  # fallback
        except Exception as e:
            print("Warning: Y-axis zoom failed:", e)
            self.ax.set_ylim(0.9, 1.1)

        # X-axis zoom
        xmin = self.xmin_var.get()
        xmax = self.xmax_var.get()
        self.ax.set_xlim(xmin, xmax)

        self.ax.set_title("ϕ Growth Metrics (w/ extrapolation)")
        self.ax.set_xlabel("Level")
        self.ax.legend()
        self.ax.grid(True)
        self.canvas.draw()

    def update_zoom(self):
        if hasattr(self, "last_df"):
            self.plot_graph(self.last_df)


# --- User Interface ---
def main():
    import tkinter as tk  # Ensure Tkinter is loaded in main thread

    print("\n Triangle Recursive Fingerprint Calculator")
    mode = input("Choose mode: [1] Random triangles  [2] Manual input [3] Inverse solver\n> ")

    root = tk.Tk()
    root.withdraw()  # Hide root window

    if mode == '1':
        num_triangles = int(input("How many random triangles? "))
        max_level = int(input("Max recursion level: "))

        for i in range(num_triangles):
            angle1 = random.uniform(10, 80)
            angle2 = random.uniform(10, 80)
            try:
                A, B, C, angle3 = triangle_from_angles(angle1, angle2)
                df, ratios, first_diff, second_diff = process_triangle_from_coords(A, B, C, max_level)
                asymptotic = extrapolate_growth_ratio(ratios, first_diff, second_diff)
                final_ratio = [r for r in ratios if r is not None][-1]

                # GUI output
                viewer = TriangleResultWindow(f"Triangle #{i+1}")
                viewer.show_results(df, angle1, angle2, angle3, final_ratio, asymptotic)

            except Exception as e:
                print(f"Error: {e}")

    elif mode == '2':
        angle1 = float(input("Enter angle 1 (°): "))
        angle2 = float(input("Enter angle 2 (°): "))
        max_level = int(input("Max recursion level: "))

        A, B, C, angle3 = triangle_from_angles(angle1, angle2)
        df, ratios, first_diff, second_diff = process_triangle_from_coords(A, B, C, max_level)
        asymptotic = extrapolate_growth_ratio(ratios, first_diff, second_diff)
        final_ratio = [r for r in ratios if r is not None][-1]

        # GUI output
        viewer = TriangleResultWindow("Manual Triangle")
        viewer.show_results(df, angle1, angle2, angle3, final_ratio, asymptotic)

    elif mode == '3':
        target_r = float(input("Enter target growth ratio (r): "))
        max_level = int(input("Max recursion level: "))

        print("\nSolving...")
        result = solve_for_target_ratio(target_r, fast_level=6, final_level=max_level)

        # GUI output
        viewer = TriangleResultWindow("Inverse Solver Result")
        viewer.show_inverse_result(result)

    else:
        print("Invalid mode selected.")

    joblib.dump(cache, CACHE_FILE)
    root.mainloop()



    joblib.dump(cache, CACHE_FILE)

if __name__ == "__main__":
    main()
